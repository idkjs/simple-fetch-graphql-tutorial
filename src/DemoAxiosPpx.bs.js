// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Axios = require("axios");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");

var ppx_printed_query = "query dogs  {\ndogs  {\nname  \nbreed  \ndescription  \n}\n\n}\n";

function parse(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_dict.get(Caml_option.valFromOption(match), "dogs");
    var tmp;
    if (match$1 !== undefined) {
      var value$1 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeNull(value$1);
      if (match$2 !== undefined) {
        tmp = undefined;
      } else {
        var match$3 = Js_json.decodeArray(value$1);
        tmp = match$3 !== undefined ? match$3.map((function (value) {
                  var match = Js_json.decodeNull(value);
                  if (match !== undefined) {
                    return undefined;
                  } else {
                    var match$1 = Js_json.decodeObject(value);
                    var tmp;
                    if (match$1 !== undefined) {
                      var value$1 = Caml_option.valFromOption(match$1);
                      var match$2 = Js_dict.get(value$1, "name");
                      var tmp$1;
                      if (match$2 !== undefined) {
                        var value$2 = Caml_option.valFromOption(match$2);
                        var match$3 = Js_json.decodeString(value$2);
                        tmp$1 = match$3 !== undefined ? match$3 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                      } else {
                        tmp$1 = Js_exn.raiseError("graphql_ppx: Field name on type Dog is missing");
                      }
                      var match$4 = Js_dict.get(value$1, "breed");
                      var tmp$2;
                      if (match$4 !== undefined) {
                        var value$3 = Caml_option.valFromOption(match$4);
                        var match$5 = Js_json.decodeString(value$3);
                        tmp$2 = match$5 !== undefined ? match$5 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                      } else {
                        tmp$2 = Js_exn.raiseError("graphql_ppx: Field breed on type Dog is missing");
                      }
                      var match$6 = Js_dict.get(value$1, "description");
                      var tmp$3;
                      if (match$6 !== undefined) {
                        var value$4 = Caml_option.valFromOption(match$6);
                        var match$7 = Js_json.decodeString(value$4);
                        tmp$3 = match$7 !== undefined ? match$7 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
                      } else {
                        tmp$3 = Js_exn.raiseError("graphql_ppx: Field description on type Dog is missing");
                      }
                      tmp = {
                        name: tmp$1,
                        breed: tmp$2,
                        description: tmp$3
                      };
                    } else {
                      tmp = Js_exn.raiseError("graphql_ppx: Object is not a value");
                    }
                    return Caml_option.some(tmp);
                  }
                })) : Js_exn.raiseError("graphql_ppx: Expected array, got " + JSON.stringify(value$1));
      }
    } else {
      tmp = undefined;
    }
    return {
            dogs: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make(param) {
  return {
          query: ppx_printed_query,
          variables: null,
          parse: parse
        };
}

function makeWithVariables(param) {
  return {
          query: ppx_printed_query,
          variables: null,
          parse: parse
        };
}

function ret_type(f) {
  return /* module */[];
}

var MT_Ret = /* module */[];

var GetAllDogs = /* module */[
  /* ppx_printed_query */ppx_printed_query,
  /* query */ppx_printed_query,
  /* parse */parse,
  /* make */make,
  /* makeWithVariables */makeWithVariables,
  /* ret_type */ret_type,
  /* MT_Ret */MT_Ret
];

var dogsQuery = make(/* () */0);

var query = dogsQuery.query;

Axios.get("https://formidadog-ql.now.sh/graphql?query=" + query).then((function (value) {
          var dogs = value.data;
          console.log("Dogs", value.data);
          return Promise.resolve(dogs);
        })).catch((function (err) {
        console.log("Something went wrong!", err);
        return Promise.resolve(err);
      }));

exports.GetAllDogs = GetAllDogs;
exports.dogsQuery = dogsQuery;
exports.query = query;
/* dogsQuery Not a pure module */
